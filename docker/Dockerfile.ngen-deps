################################################################################################################
##### External Global Args Declaration and Defaults
################################################################################################################
# Any args that will need to be set, first declare them here, then later redeclare them within stage that uses.
# Also, for those with defaults, set those up here so that's easier to find.

ARG WORKDIR=/ngen \
    ROCKY_NGEN_DEPS_REQUIRED="sudo gcc gcc-c++ make cmake tar git gcc-gfortran libgfortran sqlite sqlite-devel \
    python3 python3-devel python3-pip gdal gdal-devel\
    bzip2 expat expat-devel flex bison udunits2 udunits2-devel zlib-devel" \
    BOOST_VERSION=1.79.0 \
    MPICH_VERSION="3.3.2" \
    NETCDF_C_VERSION=4.8.1 \
    NETCDF_CXX_VERSION=4.3.1 \
    NETCDF_FORTRAN_VERSION=4.6.0 \
    HD5_VERSION=1.10.9 \
    BLOSC2_VERSION=v2.2.0 \
    MPICH_CONFIGURE_OPTIONS="" \
    MPICH_MAKE_OPTIONS \
    NGEN_ACTIVATE_PYTHON="ON"

################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for Rocky-Linux-based "base"
FROM rockylinux:9.1 as rocky-base

ARG WORKDIR=/ngen 
RUN dnf update -y \
    && dnf install -y 'dnf-command(config-manager)' \
    && dnf config-manager --set-enabled crb \
    && dnf install -y epel-release \
    && dnf -y install sudo bash git

################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for downloading netcdf-fortran
FROM rocky-base AS downloads

# Redeclaring inside this stage to get default from before first FROM
ARG BOOST_VERSION \
    MPICH_VERSION \
    HD5_VERSION \
    NETCDF_C_VERSION \
    NETCDF_FORTRAN_VERSION \
    NETCDF_CXX_VERSION

RUN curl -L -o boost_${BOOST_VERSION//./_}.tar.bz2 https://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//./_}.tar.bz2/download \
    && mkdir /boost \
    && mv boost_${BOOST_VERSION//./_}.tar.bz2 /boost/.

RUN curl -o /tmp/mpich-${MPICH_VERSION}.tar.gz https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz

RUN curl -o /tmp/hdf5-${HD5_VERSION}.tar.gz https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-${HD5_VERSION}/src/hdf5-${HD5_VERSION}.tar.gz

RUN curl -s https://api.github.com/repos/Unidata/netcdf-c/releases \
    | grep "tarball_url" \
    | grep "${NETCDF_C_VERSION}" \
    | cut -d '"' -f 4 \
    | xargs curl -L -o /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz

RUN curl -s https://api.github.com/repos/Unidata/netcdf-fortran/releases \
    | grep "tarball_url" \
    | grep "${NETCDF_FORTRAN_VERSION}" \
    | cut -d '"' -f 4 \
    | xargs curl -L -o /tmp/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz

RUN curl -s https://api.github.com/repos/Unidata/netcdf-cxx4/releases \
    | grep "tarball_url" \
    | grep "${NETCDF_CXX_VERSION}" \
    | cut -d '"' -f 4 \
    | xargs curl -L -o /tmp/netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz

################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for just prior to "ngen-deps" for installing packaged deps
FROM rocky-base as rocky-ngen-packaged-deps

ARG ROCKY_NGEN_DEPS_REQUIRED

# Note that this includes numpy, which is needed for Python BMI support, regardless of BMI module 
RUN dnf update -y && dnf install -y ${ROCKY_NGEN_DEPS_REQUIRED} \
    && pip3 install --upgrade pip \
    && if [ "${NGEN_ACTIVATE_PYTHON}" == "ON" ]; then pip3 install numpy; fi

################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for Rocky-Linux-based "ngen-deps"
FROM rocky-ngen-packaged-deps as rocky-ngen-deps

ARG BOOST_VERSION \
    WORKDIR  \
    MPICH_VERSION \
    ROCKY_NGEN_DEPS_REQUIRED \
    MPICH_CONFIGURE_OPTIONS \
    MPICH_MAKE_OPTIONS \
    HD5_VERSION \
    NETCDF_C_VERSION \
    NETCDF_CXX_VERSION \
    NETCDF_FORTRAN_VERSION 

ENV WORKDIR=${WORKDIR} \
    BOOST_ROOT=${WORKDIR}/boost \
    MPICH_CONFIGURE_OPTIONS=${MPICH_CONFIGURE_OPTIONS} \
    MPICH_MAKE_OPTIONS=${MPICH_MAKE_OPTIONS} \
    HD5_VERSION=${HD5_VERSION} \
    NETCDF_C_VERSION=${NETCDF_C_VERSION} \
    NETCDF_CXX_VERSION=${NETCDF_CXX_VERSION} \
    NETCDF_FORTRAN_VERSION=${NETCDF_FORTRAN_VERSION} \
    HYDRA_HOST_FILE=/etc/opt/hosts

COPY --from=downloads /boost ${WORKDIR}/boost 
COPY --from=downloads /tmp/mpich-${MPICH_VERSION}.tar.gz /tmp/ngen-deps/mpich-${MPICH_VERSION}.tar.gz  
COPY --from=downloads /tmp/hdf5-${HD5_VERSION}.tar.gz /tmp/ngen-deps/hdf5-${HD5_VERSION}.tar.gz 
COPY --from=downloads /tmp/netcdf-${NETCDF_C_VERSION}.tar.gz /tmp/ngen-deps/netcdf-${NETCDF_C_VERSION}.tar.gz 
COPY --from=downloads /tmp/netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz /tmp/ngen-deps/netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz 
COPY --from=downloads /tmp/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz /tmp/ngen-deps/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz

RUN pip3 install --upgrade pip \
    && pip3 install -t /ngen numpy pandas pyyaml bmipy Cython netCDF4 wheel packaging opencv-contrib-python-headless \
    # Hostfile location for mpirun. This file will be updated automatically.
    && echo "export HYDRA_HOST_FILE=${HYDRA_HOST_FILE}" >> /etc/profile \
    && touch ${HYDRA_HOST_FILE} \
    ################### Build and install dependencies from source ################### \
    ##### Prep temp build root directory \
    && mkdir -p /tmp/ngen-deps \
    ##### Build and install mpich \
    && cd /tmp/ngen-deps \
    && tar xfz mpich-${MPICH_VERSION}.tar.gz  \
    && cd mpich-${MPICH_VERSION} \
    # mpich3 and gfortran > 10 don't get along...https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91731
    && FFLAGS="-w -fallow-argument-mismatch -O2" ./configure ${MPICH_CONFIGURE_OPTIONS} \
    && make -j $(nproc) ${MPICH_MAKE_OPTIONS} && make install \
    ##### Build and install HDF5 \
    && cd /tmp/ngen-deps \
    && tar -xzf hdf5-${HD5_VERSION}.tar.gz \
    && cd hdf5-${HD5_VERSION} \
    && ./configure --enable-parallel --prefix=/usr \
    && make -j $(nproc) && make install \
    ##### Build and install NetCDF C \
    && cd /tmp/ngen-deps \
    && mkdir netcdf \
    && tar -xzf netcdf-${NETCDF_C_VERSION}.tar.gz -C netcdf --strip 1 \
    && cd netcdf \
    && LIBS=curl && ./configure --prefix=/usr \
    && make -j $(nproc) && make install \
    ##### Build and install NetCDF Fortran \
    && cd /tmp/ngen-deps \
    && mkdir netcdf-fortran \
    && tar -xzf netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz -C netcdf-fortran --strip 1 \
    && cd netcdf-fortran \
    && export NCDIR=/usr NFDIR=/usr \
    && LD_LIBRARY_PATH=/usr/lib CPPFLAGS=-I/usr/include LDFLAGS=-L/usr/lib ./configure --prefix=/usr \
    && make -j $(nproc) \ 
    && make install \
    ##### Build and install NetCDF C++ 
    && cd /tmp/ngen-deps \
    && mkdir netcdf-cxx4 \
    && tar -xzf netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz -C netcdf-cxx4 --strip 1 \
    && mkdir netcdf-cxx4/build \
    && cd netcdf-cxx4/build \
    && ../configure --enable-parallel --prefix=/usr \
    && cmake .. \
    && make \
    && make install \
    # Install required python dependency packages with Pip \
    # Except blosc2, since packaged wheels on pypi seem to have some issues, build it ourselves
    && cd /tmp/ngen-deps \
    && git clone https://github.com/Blosc/python-blosc2/ \
    && cd python-blosc2 \
    # checkout a release tag
    && git checkout ${BLOSC2_VERSION} \ 
    && git submodule update --init --recursive \
    && python3 -m pip install -r requirements-build.txt \
    && pip3 install . \
    && pip3 install numpy pandas pyyaml bmipy Cython==3.0.3 netCDF4==1.6.3 wheel packaging \
    && HDF5_DIR=/usr pip3 install -v --no-build-isolation tables \
    # Make aliases for convenience \
    && alias pip='pip3' \
    && echo "alias pip='pip3'" >> /etc/profile \
    && alias python='python3'  \
    && echo "alias python='python3'" >> /etc/profile \
    # Also set up boost here, since we copied the download but only just installed bzip2 to work with it \
    && cd ${BOOST_ROOT} \
    && tar -xjf boost_${BOOST_VERSION//./_}.tar.bz2 \
    && rm boost_${BOOST_VERSION//./_}.tar.bz2 \
    && rm -rf /tmp/ngen-deps 

ENV PATH=${PATH}:/usr/lib64/mpich/bin
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib:/usr/local/lib64
