################################################################################################################
##### External Global Args Declaration and Defaults
################################################################################################################
ARG NGEN_BUILD_CONFIG_TYPE="Release" \
    REPO_URL=https://github.com/NOAA-OWP/ngen.git \
    BRANCH=master \
    COMMIT \
    TAG_NAME 


################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for building framework in Rocky Linux environment
FROM awiciroh/ngen-deps:${TAG_NAME} as rocky_init_repo
ARG REPO_URL \
    BRANCH \
    COMMIT \
    WORKDIR \
    UPDATE=2023-04-27

WORKDIR /ngen

RUN if [ "x$COMMIT" != "x" ]; then \
    git clone --single-branch --branch $BRANCH $REPO_URL \
    && cd ./ngen \
    && git checkout $COMMIT; \
    else \
    git clone --depth 1 --branch $BRANCH $REPO_URL \
    && cd ./ngen ; \
    fi \
    && git submodule update --init --depth 1 test/googletest \
    && git submodule update --init --recursive --depth 1

# Make an alias for t-route with tag name
FROM awiciroh/t-route:${TAG_NAME} as troute

################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for building framework in Rocky Linux environment
FROM awiciroh/ngen-deps:${TAG_NAME} as rocky_build_ngen

ARG REPO_URL \
    BRANCH \
    COMMIT \
    NGEN_BUILD_CONFIG_TYPE="Release" \
    NGEN_ACTIVATE_C="ON" \
    NGEN_ACTIVATE_FORTRAN="ON" \
    NGEN_ACTIVATE_PYTHON="ON" \
    NGEN_NETCDF_ACTIVE="ON" \
    NGEN_ROUTING_ACTIVE="ON" \
    NGEN_WITH_SQLITE="ON" \
    NGEN_UDUNITS_ACTIVE="ON" \
    NGEN_UDUNITS_QUIET="ON" \
    BUILD_NGEN_SERIAL="true" \
    BUILD_NGEN_PARALLEL="true" \
    BUILD_NGEN_PARTITIONER="true" \
    BUILD_NOAH_OWP="true" \
    BUILD_CFE="true" \
    BUILD_TOPMODEL="true" \
    BUILD_PET="true" \
    BUILD_SLOTH="true"

COPY --chown=${USER} --from=rocky_init_repo /ngen/ngen /ngen/ngen
COPY --chown=${USER} --from=troute /ngen/t-route/wheels /tmp/t-route-wheels
COPY --chown=${USER} --from=troute /ngen/t-route/requirements.txt /tmp/t-route-requirements.txt
ENV BOOST_ROOT=/ngen/boost

USER root
RUN if [ "${NGEN_ACTIVATE_PYTHON}" == "ON" ]; then \
    chgrp -R ${USER} /usr/local/lib*/python3.* ; \
    chmod -R g+sw /usr/local/lib*/python3.* ; \
    fi \
    && if [ "${NGEN_ROUTING_ACTIVE}" == "ON" ]; then \
    # These packages install command line tools, which try to go in /usr/local/bin \
    pip3 install pyarrow pyproj fiona; \
    fi
USER ${USER}

#These patches are from ngen commit 7551590a415b89026559c1c570d4154e4746161b
#and are needed to fix an I/O bug in the sub modules (and bmi tests) that cause an infinite loop
#https://github.com/NOAA-OWP/ngen/pull/515, https://github.com/NOAA-OWP/ngen/pull/518 both merged upstream, patch no longer needed
# All the affected submodules have been patched and the ngen submodule commits have been updated
# so this patch is no longer needed.  I'm leaving these lines commented out in case custom patches
# need to be applied in the future.
# Patches can be generated with
# generate submodule patch:
#git submodule --quiet foreach --recursive 'export NAME="${PWD##*/}"; git --no-pager diff --src-prefix="a/extern/${NAME}/${NAME}/" --dst-prefix="b/extern/${NAME}/${NAME}/"' > fix_io_sub.patch
# generate patch of ngen without submodules
#git --no-pager diff --ignore-submodules > fix_io.patch
#It is then probably a good idea to to add a commit hash to thee patch file name as below
#to indicate from what point the patch was generated.

#COPY fix_io_sub_7551590a415b89026559c1c570d4154e4746161b.patch ${WORKDIR}/ngen/fix_io_sub.patch
# Apply the IO fix to submodules, once they all get patched/merged, this can be dropped...
#RUN cd ${WORKDIR}/ngen && git apply --reject --whitespace=fix \
#    #patch the submodules
#    fix_io_sub.patch
WORKDIR /ngen/ngen
RUN if [ "${NGEN_ACTIVATE_PYTHON}" == "ON" ]; then \
    pip3 install -r extern/test_bmi_py/requirements.txt; \
    if [ "${NGEN_ROUTING_ACTIVE}" == "ON" ] ; then \
    pip3 install /tmp/t-route-wheels/*.whl; \
    pip3 install -r /tmp/t-route-requirements.txt; \
    pip3 install deprecated geopandas ; \
    fi; \
    fi 

RUN if [ "${BUILD_NGEN_SERIAL}" == "true" ]; then \
    cmake -B cmake_build_serial -S . \
    -DNGEN_WITH_EXTERN_ALL=ON \
    -DMPI_ACTIVE:BOOL=OFF \
    -DNETCDF_ACTIVE:BOOL=${NGEN_NETCDF_ACTIVE} \
    -DBMI_C_LIB_ACTIVE:BOOL=${NGEN_ACTIVATE_C} \
    -DBMI_FORTRAN_ACTIVE:BOOL=${NGEN_ACTIVATE_FORTRAN} \
    -DNGEN_ACTIVATE_PYTHON:BOOL=${NGEN_ACTIVATE_PYTHON} \
    -DNGEN_ACTIVATE_ROUTING:BOOL=${NGEN_ROUTING_ACTIVE} \
    -DNGEN_WITH_SQLITE:BOOL=${NGEN_WITH_SQLITE} \
    -DUDUNITS_ACTIVE:BOOL=${NGEN_UDUNITS_ACTIVE} \
    -DUDUNITS_QUIET:BOOL=${NGEN_UDUNITS_QUIET} \
    -DCMAKE_INSTALL_PREFIX=/ngen/ngen \
    -DNETCDF_INCLUDE_DIR=/usr/include \
    -DNETCDF_LIBRARY=/usr/lib/libnetcdf.so \
    -DNETCDF_CXX_INCLUDE_DIR=/usr/local/include \
    -DNETCDF_CXX_LIBRARY=/usr/local/lib64/libnetcdf-cxx4.so ; \
    cmake --build cmake_build_serial --target all -j $(nproc); \
    fi 
RUN if [ "${BUILD_NGEN_PARALLEL}" == "true" ]; then \
    cmake -B cmake_build_parallel -S . \
    -DNGEN_WITH_EXTERN_ALL=ON \
    -DMPI_ACTIVE:BOOL=ON \
    -DNETCDF_ACTIVE:BOOL=${NGEN_NETCDF_ACTIVE} \
    -DBMI_C_LIB_ACTIVE:BOOL=${NGEN_ACTIVATE_C} \
    -DBMI_FORTRAN_ACTIVE:BOOL=${NGEN_ACTIVATE_FORTRAN} \
    -DNGEN_ACTIVATE_PYTHON:BOOL=${NGEN_ACTIVATE_PYTHON} \
    -DNGEN_ACTIVATE_ROUTING:BOOL=${NGEN_ROUTING_ACTIVE} \
    -DNGEN_WITH_SQLITE:BOOL=${NGEN_WITH_SQLITE} \
    -DUDUNITS_ACTIVE:BOOL=${NGEN_UDUNITS_ACTIVE} \
    -DUDUNITS_QUIET:BOOL=${NGEN_UDUNITS_QUIET} \
    -DCMAKE_INSTALL_PREFIX=${WORKDIR} \
    -DNETCDF_INCLUDE_DIR=/usr/include \
    -DNETCDF_LIBRARY=/usr/lib/libnetcdf.so \
    -DNETCDF_CXX_INCLUDE_DIR=/usr/local/include \
    -DNETCDF_CXX_LIBRARY=/usr/local/lib64/libnetcdf-cxx4.so ; \
    cmake --build cmake_build_parallel --target all -j $(nproc); \
    fi 
WORKDIR /ngen/ngen
# run the serial tests \
# && cmake --build cmake_build_serial --target test \ 
# have to remove the output from the previous tests runs for routing test to be run again... \
RUN rm -f ./test/data/routing/*.parquet \
    # run the parallel tests \
    # && cmake --build cmake_build_parallel --target test \
    # clean these up again... \
    && rm -f ./test/data/routing/*.parquet \
    #Run the MPI tests manually, they don't play well with ctest and are skipped in the above tests \
    && mpirun -n 2 cmake_build_parallel/test/test_remote_nexus \
    && mpirun -n 3 cmake_build_parallel/test/test_remote_nexus \
    && mpirun -n 4 cmake_build_parallel/test/test_remote_nexus \
    && find cmake_build* -type f -name "*" ! \( -name "*.so" -o -name "ngen" -o -name "partitionGenerator" \) -exec rm {} + 
