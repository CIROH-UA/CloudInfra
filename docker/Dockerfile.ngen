################################################################################################################
##### External Global Args Declaration and Defaults
################################################################################################################
ARG NGEN_BUILD_CONFIG_TYPE="Release" \
    REPO_URL=https://github.com/NOAA-OWP/ngen.git \
    BRANCH=master \
    COMMIT \
    WORKDIR=/ngen


################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for building framework in Rocky Linux environment
FROM awiciroh/ngen-deps:latest as rocky_init_repo
ARG REPO_URL \
    BRANCH \
    COMMIT \
    WORKDIR \
    UPDATE=2023-04-27

WORKDIR ${WORKDIR}

RUN cd ${WORKDIR} \
    && if [ "x$COMMIT" != "x" ]; then \
        git clone --single-branch --branch $BRANCH $REPO_URL \
        && cd ./ngen \
        && git checkout $COMMIT; \
    else \
        git clone --depth 1 --branch $BRANCH $REPO_URL \
        && cd ./ngen ; \
    fi \
    && echo "#!/bin/bash" > build_sub \
    && echo "cmake -B \$1/cmake_build -DCMAKE_BUILD_TYPE=${NGEN_BUILD_CONFIG_TYPE} -S \$1" >> build_sub \
    && echo "cmake --build \$1/cmake_build" >> build_sub \
    #&& echo "cd \$1/cmake_build && make install" >> build_sub \
    && chmod u+x build_sub \
    && git submodule update --init --depth 1 test/googletest \
    && git submodule update --init --recursive --depth 1

################################################################################################################
################################################################################################################
FROM awiciroh/ngen-deps:latest as rocky_ngen_build_testing

COPY --chown=${USER} --from=rocky_init_repo ${WORKDIR}/ngen ${WORKDIR}/ngen
ENV BOOST_ROOT=${WORKDIR}/boost
WORKDIR ${WORKDIR}/ngen

################################################################################################################
################################################################################################################
##### Create intermediate Docker build stage for building framework in Rocky Linux environment
FROM awiciroh/ngen-deps:latest as rocky_build_ngen

ARG REPO_URL \
    BRANCH \
    COMMIT \
    NGEN_BUILD_CONFIG_TYPE="Release" \
    NGEN_ACTIVATE_C="ON" \
    NGEN_ACTIVATE_FORTRAN="ON" \
    NGEN_ACTIVATE_PYTHON="ON" \
    NGEN_NETCDF_ACTIVE="ON" \
    NGEN_ROUTING_ACTIVE="ON" \
    NGEN_UDUNITS_ACTIVE="ON" \
    NGEN_UDUNITS_QUIET="ON" \
    BUILD_NGEN_SERIAL="true" \
    BUILD_NGEN_PARALLEL="true" \
    BUILD_NGEN_PARTITIONER="true" \
    BUILD_NOAH_OWP="true" \
    BUILD_CFE="true" \
    BUILD_TOPMODEL="true" \
    BUILD_PET="true" \
    BUILD_SLOTH="true"

COPY --chown=${USER} --from=rocky_init_repo ${WORKDIR}/ngen ${WORKDIR}/ngen
COPY --chown=${USER} --from=awiciroh/t-route:latest ${WORKDIR}/t-route/wheels /tmp/t-route-wheels
COPY --chown=${USER} --from=awiciroh/t-route:latest ${WORKDIR}/t-route/requirements.txt /tmp/t-route-requirements.txt
ENV BOOST_ROOT=${WORKDIR}/boost

USER root
RUN if [ "${NGEN_ACTIVATE_PYTHON}" == "ON" ]; then \
        chgrp -R ${USER} /usr/local/lib*/python3.* ; \
        chmod -R g+sw /usr/local/lib*/python3.* ; \
    fi \
    && if [ "${NGEN_ROUTING_ACTIVE}" == "ON" ]; then \
        # These packages install command line tools, which try to go in /usr/local/bin \
        pip3 install pyarrow pyproj fiona; \
    fi
USER ${USER}

#These patches are from ngen commit 7551590a415b89026559c1c570d4154e4746161b
#and are needed to fix an I/O bug in the sub modules (and bmi tests) that cause an infinite loop
#https://github.com/NOAA-OWP/ngen/pull/515, https://github.com/NOAA-OWP/ngen/pull/518 both merged upstream, patch no longer needed
# All the affected submodules have patched/merged in their respective upstream repos, 
# but ngen submodules have not been updated to the current HEAD
# of all the submdoules, and that might prove difficult to do in the near future, but if that does happen,
# then this can be removed at that point.
COPY fix_io_sub_7551590a415b89026559c1c570d4154e4746161b.patch ${WORKDIR}/ngen/fix_io_sub.patch
# Set default working directory
ENV WORKDIR_ROOT=${WORKDIR}
WORKDIR ${WORKDIR}/ngen

# Apply patches
RUN git apply --reject --whitespace=fix fix_io_sub.patch

# Install required Python packages
RUN if [ "${NGEN_ACTIVATE_PYTHON}" == "ON" ]; then \
        pip3 install -r extern/test_bmi_py/requirements.txt; \
        if [ "${NGEN_ROUTING_ACTIVE}" == "ON" ]; then \
            pip3 install /tmp/t-route-wheels/*.whl; \
            pip3 install -r /tmp/t-route-requirements.txt; \
            pip3 install deprecated geopandas; \
        fi \
    fi

# Build submodules
RUN if [ "${NGEN_ACTIVATE_FORTRAN}" == "ON" ]; then \
        ./build_sub extern/iso_c_fortran_bmi; \
        if [ "${BUILD_NOAH_OWP}" == "true" ]; then ./build_sub extern/noah-owp-modular; fi \
    fi && \
    if [ "${NGEN_ACTIVATE_C}" == "ON" ]; then \
        if [ "${BUILD_CFE}" == "true" ]; then ./build_sub extern/cfe; fi; \
        if [ "${BUILD_PET}" == "true" ]; then ./build_sub extern/evapotranspiration/evapotranspiration; fi; \
        if [ "${BUILD_TOPMODEL}" == "true" ]; then ./build_sub extern/topmodel; fi \
    fi && \
    if [ "${BUILD_SLOTH}" == "true" ]; then ./build_sub extern/sloth; fi


# Setup build directories
RUN COMMON_ARGS="-DNETCDF_ACTIVE:BOOL=${NGEN_NETCDF_ACTIVE} \
    -DBMI_C_LIB_ACTIVE:BOOL=${NGEN_ACTIVATE_C} \
    -DBMI_FORTRAN_ACTIVE:BOOL=${NGEN_ACTIVATE_FORTRAN} \
    -DNGEN_ACTIVATE_PYTHON:BOOL=${NGEN_ACTIVATE_PYTHON} \
    -DNGEN_ACTIVATE_ROUTING:BOOL=${NGEN_ROUTING_ACTIVE} \
    -DUDUNITS_ACTIVE:BOOL=${NGEN_UDUNITS_ACTIVE} \
    -DUDUNITS_QUIET:BOOL=${NGEN_UDUNITS_QUIET} \
    -DCMAKE_INSTALL_PREFIX=${WORKDIR_ROOT} \
    -DNETCDF_INCLUDE_DIR=/usr/include \
    -DNETCDF_LIBRARY=/usr/lib/libnetcdf.so \
    -DNETCDF_CXX_INCLUDE_DIR=/usr/local/include \
    -DNETCDF_CXX_LIBRARY=/usr/local/lib64/libnetcdf-cxx4.so" && \
    if [ "${BUILD_NGEN_SERIAL}" == "true" ]; then \
        cmake -B cmake_build_serial -S . -DMPI_ACTIVE:BOOL=OFF $COMMON_ARGS ; \
    fi && \
    if [ "${BUILD_NGEN_PARALLEL}" == "true" ]; then \
        cmake -B cmake_build_parallel -S . -DMPI_ACTIVE:BOOL=ON $COMMON_ARGS ; \
    fi && \
    ln -s $(if [ "${BUILD_NGEN_PARALLEL}" == "true" ]; then echo "cmake_build_parallel"; else echo "cmake_build_serial"; fi) cmake_build

# Build required submodules/external libs for tests
RUN ./build_sub extern/test_bmi_cpp && \
    if [ "${NGEN_ACTIVATE_C}" == "ON" ]; then ./build_sub extern/test_bmi_c; fi && \
    if [ "${NGEN_ACTIVATE_FORTRAN}" == "ON" ]; then ./build_sub extern/test_bmi_fortran; fi

RUN sed -i \
-e 's|.PHONY : CMakeFiles|.PHONY : /ngen/ngen/extern/test_bmi_cpp/cmake_build/CMakeFiles|' \
-e 's|include CMakeFiles|include /ngen/ngen/extern/test_bmi_cpp/cmake_build/CMakeFiles|' \
/ngen/ngen/extern/test_bmi_cpp/cmake_build/CMakeFiles/testbmicppmodel.dir/build.make

RUN tail /ngen/ngen/extern/test_bmi_cpp/cmake_build/CMakeFiles/testbmicppmodel.dir/build.make

# Build in cmake_build_serial
RUN if [ "${BUILD_NGEN_SERIAL}" == "true" ]; then \
        cmake --build cmake_build_serial --target all -j $(nproc); \
    fi

# Build in cmake_build_parallel
RUN if [ "${BUILD_NGEN_PARALLEL}" == "true" ]; then \
        cmake --build cmake_build_parallel --target all -j $(nproc); \
    fi

# Cleanup
RUN rm -f ./test/data/routing/*.parquet

# Manual MPI tests
RUN mpirun -n 2 cmake_build_parallel/test/test_remote_nexus && \
    mpirun -n 3 cmake_build_parallel/test/test_remote_nexus && \
    mpirun -n 4 cmake_build_parallel/test/test_remote_nexus

# Clean up
RUN find cmake_build* -type f -name "*" ! \( -name "*.so" -o -name "ngen" -o -name "partitionGenerator" \) -exec rm {} +
